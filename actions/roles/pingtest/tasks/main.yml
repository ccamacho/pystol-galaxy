---
#
# Begining of mandatory lines
#
- name: Update the CR with the start of the action
  block:
  - name: Apply the chaos result CR
     shell: kubectl patch pystolactions "{{ pystol_action_id }}" --type='json' -p='[{"op": "replace", "path": "/spec/state", "value":"Startttttin! :)"}]'
#    shell: kubectl apply find_the_cr status starting the action
# We need to log here the action state 
# Waiting, Running, Finished with errors, Finished successfully
#
# End of mandatory lines
#
- name: Action execution block
  block:
  - name: Gather some real facts from the role
    pystol.actions.real_facts:
      name: This is a test
    register: testout
  - debug:
      msg: "{{ testout }}"
  - name: Get a list of all pods from any namespace
    k8s_info:
      kind: Pod
    register: pingtest_pod_list
  - debug: var=pingtest_pod_list
  - name: Get the Internal IP of the first node
    shell: kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }' | head -1
    register: pingtest_node_ip
  - debug: var=pingtest_node_ip.stdout
  - name: Ping the internal IP of a node from the pod
    command: "ping -c 2 {{ pingtest_node_ip.stdout }}"
#
# Begining of mandatory lines
#
  - name: Apply the chaos result CR
    shell: kubectl patch pystolactions "{{ pystol_action_id }}" --type='json' -p='[{"op": "replace", "path": "/spec/state", "value":"Exec done :P"}]'

  - set_fact:
      execution: "Passed"
  rescue:
    - set_fact:
        execution: "Failed"
    - name: Apply the chaos result CR
      shell: kubectl patch pystolactions "{{ pystol_action_id }}" --type='json' -p='[{"op": "replace", "path": "/spec/state", "value":"FaIlEd :("}]'
  always:
    - name: Update the CR with the end of the action
      block:
      - name: Apply the chaos result CR
        shell: kubectl patch pystolactions "{{ pystol_action_id }}" --type='json' -p='[{"op": "replace", "path": "/spec/state", "value":"FinIsHeD :)"}]'
#        shell: kubectl apply find_the_cr status execution plus output 
#
# End of mandatory lines
#
