---
#
# Begining of mandatory lines
#
- debug:
    msg: "Ansible execution of action: {{ pystol_action_id }}"
# - name: Start the action
#   include_role:
#     name: pystol.actions.core
#     tasks_from: start_action
- name: Update the CR with the start of the action
  block:
    - name: Workflow - Executing action
      shell: "kubectl patch pystolactions {{ pystol_action_id }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/workflow_state\", \"value\":\"PystolOperatorExecutingAction\"}]'"
    - name: Action - Running
      shell: "kubectl patch pystolactions {{ pystol_action_id }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/action_state\", \"value\":\"PystolActionRunning\"}]'"
#
# End of mandatory lines
#
- name: Action execution block
  block:
    - name: Gather some real facts from the role
      pystol.actions.real_facts:
        name: This is a test
      register: testout
    - debug:
        msg: "{{ testout }}"
    - name: Get a list of all pods from any namespace
      k8s_info:
        kind: Pod
      register: pingtest_pod_list
    - debug: var=pingtest_pod_list
    - name: Get the Internal IP of the first node
      shell: |
        kubectl get nodes -o \
        jsonpath='{$.items[*].status.addresses[?(@.type=="InternalIP")].address}' | \
        head -1
      register: pingtest_node_ip
    - debug: var=pingtest_node_ip.stdout
    - name: Ping the internal IP of a node from the pod
      command: "ping -c 2 {{ pingtest_node_ip.stdout }}"
      register: ping_result
      # Here we make the task fail
      # depending on the actin execution
      failed_when: >
        (ping_result.stderr | length > 0) or
        (ping_result.rc == 10)
    - debug: msg="{{ ping_result.stderr }}"
    - debug: msg="{{ ping_result.stdout }}"
    #
    # Begining of mandatory lines
    #
    - name: Action - Ended OK
      shell: "kubectl patch pystolactions {{ pystol_action_id }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/action_state\", \"value\":\"PystolActionEndedSuccessfully\"}]'"
  rescue:
    - name: Action - Ended with errors
      shell: "kubectl patch pystolactions {{ pystol_action_id }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/action_state\", \"value\":\"PystolActionEndedFail\"}]'"
  always:
    #
    # In the set_fact you need to calculate
    # whatever the pystol action should output
    # as a result
    #
    - name: Set Result facts
      set_fact:
        pystol_action_stdout: "{{ ping_result.stdout | to_nice_json(indent=2) }}"
        pystol_action_stderr: "{{ ping_result.stderr | to_nice_json(indent=2) }}"
    # TODO: Make a logger module to store this data
    - name: Update the CR with the end of the action
      block:
        - name: Update action stdout
          shell: "kubectl patch pystolactions {{ pystol_action_id }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/action_stdout\", \"value\":\" {{ pystol_action_stdout }} \"}]'"
        - name: Update action stderr
          shell: "kubectl patch pystolactions {{ pystol_action_id }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/action_stderr\", \"value\":\" {{ pystol_action_stderr }} \"}]'"
        - name: Workflow - Ended
          shell: "kubectl patch pystolactions {{ pystol_action_id }} --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/workflow_state\", \"value\":\"PystolOperatorEnded\"}]'"
#
# End of mandatory lines
#
